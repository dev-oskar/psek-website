---
import TwSizeIndicator from "@/components/core/TailwindSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/layouts/partials/Footer.astro";
import Header from "@/layouts/partials/Header.astro";
import "@/styles/main.scss";

import { AstroFont } from "astro-font";
import { ViewTransitions } from "astro:transitions";
import { getEntry } from "astro:content";
import type { PageType } from "@/content/page.types";
import type { ContentEntryMap } from "astro:content";

const GTAG = import.meta.env.GTAG_ID || "G-XXXXXXXXXX";

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;

let fontPrimary, fontSecondary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}

// types for frontmatters
export interface Props {
  /**
   * Entry keys to fetch data from content. The entry is expected to be a `PageType`
   * If an entry is not found, it will log a warning in the console.
   *
   * When found, the page data will be used to build the metadata for the page (SEO)
   *
   * @see PageType
   */
  entry_keys?: [keyof ContentEntryMap, string];
  /**
   * Override <title> og:title and twitter:title
   * @default config.site.title
   */
  title?: string;
  /**
   * Override meta description, og:description and twitter:description-
   * @default config.metadata.meta_description
   */
  description?: string;
  /**
   * Override meta keywords
   * @default config.metadata.meta_keywords
   */
  keywords?: string[];
  /**
   * Override the meta author
   * @default config.metadata.meta_author
   */
  author?: string;
  /**
   * Override og:image and twitter:image
   * @default config.metadata.meta_image
   */
  image?: string;
  noindex?: boolean;
  canonical_url?: string;
}

// distructure frontmatters
const {
  entry_keys,
  title,
  description,
  author,
  keywords,
  image,
  noindex,
  canonical_url,
} = Astro.props;

let page: PageType | undefined = undefined;

if (entry_keys) {
  const page_entry = await getEntry(...entry_keys);
  if (page_entry) {
    page = page_entry.data as PageType;
  }
}
const _title = title
  ? title
  : page?.document_title
    ? page.document_title
    : config.site.title;
const _description = description
  ? description
  : page?.meta_description
    ? page.meta_description
    : config.metadata.meta_description;
const _image = image
  ? image
  : page?.meta_image
    ? page.meta_image
    : config.metadata.meta_image;
const _author = author
  ? author
  : page?.meta_author
    ? page.meta_author
    : config.metadata.meta_author;
const _keywords = keywords
  ? keywords
  : page?.meta_keywords
    ? page.meta_keywords
    : config.metadata.meta_keywords;
const _canonical_url = canonical_url
  ? canonical_url
  : page?.canonical_url
    ? page.canonical_url
    : undefined;
const _noindex =
  noindex === true ? true : page?.noindex === true ? true : false;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/images/favicons/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/images/favicons/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/images/favicons/favicon-16x16.png"
    />
    <link rel="manifest" href="/images/favicons/site.webmanifest" />
    <!-- theme meta -->
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- google font css -->
    <AstroFont
      config={[
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontPrimary!,
          fallback: "sans-serif",
          cssVariable: "font-primary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${pf}&display=swap`,
        },
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontSecondary!,
          fallback: "sans-serif",
          cssVariable: "font-secondary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${sf}&display=swap`,
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- Google tag (gtag.js) -->
    <script
      async
      src={"https://www.googletagmanager.com/gtag/js?id=" + GTAG}
      is:inline></script>
    <script type="text/javascript" define:vars={{ GTAG }} is:inline>
      // Set the GTAG_ID variable as a global variable
      window.GTAG_ID = GTAG;
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", window.GTAG_ID);
    </script>

    <!-- title -->
    <title>
      {plainify(_title)}
    </title>

    <!-- canonical url -->
    {
      _canonical_url && (
        <link rel="canonical" href={_canonical_url} item-prop="url" />
      )
    }

    <!-- noindex robots -->
    {
      _noindex === true ? (
        <meta name="robots" content="noindex, nofollow" />
      ) : (
        <meta name="robots" content="index, follow" />
      )
    }

    <!-- meta-description -->
    <meta name="description" content={plainify(_description)} />

    <ViewTransitions />

    <!-- author from config.json -->
    <meta name="author" content={plainify(_author)} />

    <!-- og-title -->
    <meta property="og:title" content={plainify(_title)} />

    <!-- og-description -->
    <meta property="og:description" content={plainify(_description)} />
    <meta property="og:type" content="website" />
    <meta
      property="og:url"
      content={`${config.site.base_url}/${Astro.url.pathname.replace("/", "")}`}
    />

    <!-- twitter-title -->
    <meta name="twitter:title" content={plainify(_title)} />

    <!-- twitter-description -->
    <meta name="twitter:description" content={plainify(_description)} />

    <!-- og-image -->
    <meta property="og:image" content={`${config.site.base_url}${_image}`} />

    <!-- twitter-image -->
    <meta name="twitter:image" content={`${config.site.base_url}${_image}`} />
    <meta name="twitter:card" content="summary_large_image" />
    <script is:inline>
      const setTheme = () => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        if (theme === "light") {
          document.documentElement.classList.remove("dark");
        } else {
          document.documentElement.classList.add("dark");
        }

        window.localStorage.setItem("theme", theme || "light");
      };

      setTheme();

      document.addEventListener("astro:after-swap", setTheme);
    </script>
  </head>
  <body class="transition-colors duration-500">
    <TwSizeIndicator />
    <Header />
    <main
      id="main-content"
      class="max-w-[90%] lg:max-w-[85%] xl:max-w-[80%] mx-auto mt-4 mb-8"
    >
      <slot />
    </main>
    <Footer />

    <!-- Construction Notification Modal -->
    <div
      id="construction-modal"
      class="fixed inset-0 z-50 flex items-center justify-center hidden"
    >
      <div class="fixed inset-0 bg-black opacity-50"></div>
      <div
        class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-md w-full relative z-10"
      >
        <button
          id="close-modal"
          class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <h3 class="text-lg font-semibold mb-2 dark:text-white">Uwaga</h3>
        <p class="dark:text-gray-300">
          Strona jest obecnie w rozbudowie, za wszelkie błędy przepraszamy.
        </p>
      </div>
    </div>

    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        // Check if the modal has been shown before in this session
        if (!sessionStorage.getItem("construction-modal-shown")) {
          // Show the modal
          const modal = document.getElementById("construction-modal");
          if (modal) {
            modal.classList.remove("hidden");

            // Set flag in session storage
            sessionStorage.setItem("construction-modal-shown", "true");

            // Close modal when clicking the close button
            const closeButton = document.getElementById("close-modal");
            if (closeButton) {
              closeButton.addEventListener("click", () => {
                modal.classList.add("hidden");
              });
            }

            // Close modal when clicking outside
            modal.addEventListener("click", (e) => {
              if (e.target === modal) {
                modal.classList.add("hidden");
              }
            });
          }
        }
      });
    </script>
  </body>
</html>
