---
import Logo from "@/components/core/Logo.astro";
import ThemeToggle from "@/components/core/ThemeToggle.astro";
import menu from "@/config/menu.json";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;
---

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:hidden mr-6"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:hidden mr-6"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <!-- spacer to push nav to the right -->
    <div class="flex-grow order-1 hidden lg:block"></div>

    <div class="order-3 flex items-center flex-wrap">
      <ul
        id="nav-menu"
        class="navbar-nav hidden w-full absolute top-full left-0 bg-surface-100 shadow-md lg:shadow-none lg:static lg:flex lg:w-auto lg:space-x-4 lg:mr-4 lg:bg-transparent items-center"
      >
        {
          main.map((menu) => (
            <>
              {menu.hasChildren ? (
                <li class="nav-item nav-dropdown group relative cursor-pointer dropdown-button">
                  <span
                    role="button"
                    aria-expanded="false"
                    aria-haspopup="true"
                    tabindex="0"
                    class={`nav-link inline-flex items-center ${
                      menu.children?.map(({ url }) => url).includes(pathname) ||
                      menu.children
                        ?.map(({ url }) => `${url}/`)
                        .includes(pathname)
                        ? "active"
                        : ""
                    }`}
                  >
                    {menu.name}
                    <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20" aria-hidden="true">
                      <title>Expand dropdown menu</title>
                      <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                    </svg>
                  </span>
                  <ul id="dropdown" class="nav-dropdown-list">
                    {menu.children?.map((child) => (
                      <li class="nav-dropdown-item">
                        <a
                          href={child.url}
                          class={`nav-dropdown-link block ${
                            (pathname === `${child.url}/` ||
                              pathname === child.url) &&
                            "text-secondary"
                          }`}
                        >
                          {child.name}
                        </a>
                      </li>
                    ))}
                  </ul>
                </li>
              ) : (
                <li class="nav-item">
                  <a
                    href={menu.url}
                    class={`nav-link inline-block lg:block ${
                      (pathname === `${menu.url}/` || pathname === menu.url) &&
                      "active"
                    }`}
                  >
                    {menu.name}
                  </a>
                </li>
              )}
            </>
          ))
        }
      </ul>
      
      <div class="items-center">
        <ThemeToggle />
      </div>
    </div>
  </nav>
</header>

<script is:inline>
  function initDropdownListeners() {
    document.querySelectorAll(".dropdown-button").forEach((button) => {
      const dropdown = button.closest(".nav-dropdown");
      function toggleDropdown(e) {
        e.stopPropagation(); // Prevent unnecessary events
        const isOpen = dropdown.classList.toggle("open");
        
        // Update aria-expanded attribute
        const toggleButton = dropdown.querySelector("[role='button']");
        if (toggleButton) {
          toggleButton.setAttribute("aria-expanded", isOpen ? "true" : "false");
        }

        // Close other open dropdowns
        document.querySelectorAll(".nav-dropdown").forEach((otherDropdown) => {
          if (otherDropdown !== dropdown) {
            otherDropdown.classList.remove("open");
            const otherButton = otherDropdown.querySelector("[role='button']");
            if (otherButton) {
              otherButton.setAttribute("aria-expanded", "false");
            }
          }
        });
      }
      button.removeEventListener("click", toggleDropdown);
      button.addEventListener("click", toggleDropdown);
    });
  }
  // Asegura que los eventos se reasignen después de cada navegación
  document.addEventListener("astro:page-load", () => {
    initDropdownListeners();
  });
</script>
